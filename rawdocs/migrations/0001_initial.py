# Generated by Django 4.2.7 on 2025-07-23 13:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import rawdocs.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AILearningMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_version', models.CharField(default='groq_llama3.3_70b', max_length=50)),
                ('precision_score', models.FloatField(default=0.0)),
                ('recall_score', models.FloatField(default=0.0)),
                ('f1_score', models.FloatField(default=0.0)),
                ('total_feedbacks', models.IntegerField(default=0)),
                ('improvement_rate', models.FloatField(default=0.0)),
                ('entity_performance', models.JSONField(default=dict, help_text='Performance per entity type')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='AnnotationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('display_name', models.CharField(help_text='Libellé affiché', max_length=100)),
                ('color', models.CharField(default='#3b82f6', help_text='Couleur hexadécimale', max_length=7)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PromptOptimization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_type', models.CharField(max_length=100)),
                ('optimized_prompt', models.TextField()),
                ('performance_score', models.FloatField()),
                ('feedback_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('metadonneur', 'Métadonneur'), ('annotateur', 'Annotateur'), ('expert', 'Expert'), ('client', 'Client')], default='client', max_length=20)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RawDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(blank=True, help_text="URL d'origine du PDF")),
                ('file', models.FileField(help_text='Fichier PDF téléchargé', upload_to=rawdocs.models.pdf_upload_to)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_validated', models.BooleanField(default=False, help_text='Document validé par un métadonneur')),
                ('validated_at', models.DateTimeField(blank=True, null=True)),
                ('is_ready_for_expert', models.BooleanField(default=False, help_text='Document prêt pour révision expert')),
                ('expert_ready_at', models.DateTimeField(blank=True, help_text="Date à laquelle le document est devenu prêt pour l'expert", null=True)),
                ('total_pages', models.IntegerField(default=0, help_text='Nombre total de pages')),
                ('pages_extracted', models.BooleanField(default=False, help_text='Pages extraites individuellement')),
                ('title', models.TextField(blank=True, help_text='Titre du document')),
                ('doc_type', models.CharField(blank=True, help_text='Type du document (guide, rapport…)', max_length=100, verbose_name='Type')),
                ('publication_date', models.CharField(blank=True, help_text='Date de publication', max_length=100)),
                ('version', models.CharField(blank=True, help_text='Version extraite', max_length=50)),
                ('source', models.CharField(blank=True, help_text='Organisation émettrice (EMA, FDA…)', max_length=255)),
                ('context', models.TextField(blank=True, help_text='Contexte extrait (2 phrases max)')),
                ('country', models.CharField(blank=True, help_text='Pays détecté (GPE ou TLD)', max_length=100)),
                ('language', models.CharField(blank=True, help_text='Langue détectée (fr, en…)', max_length=10)),
                ('url_source', models.URLField(blank=True, help_text="URL d'origine pour référence")),
                ('owner', models.ForeignKey(blank=True, help_text='Utilisateur qui a téléchargé ce document', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='raw_documents', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MetadataLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(max_length=100)),
                ('old_value', models.TextField(blank=True, null=True)),
                ('new_value', models.TextField(blank=True, null=True)),
                ('modified_at', models.DateTimeField(auto_now_add=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='rawdocs.rawdocument')),
                ('modified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DocumentPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_number', models.IntegerField(help_text='Numéro de page (1-indexé)')),
                ('raw_text', models.TextField(help_text='Texte brut extrait de la page')),
                ('cleaned_text', models.TextField(help_text='Texte nettoyé pour annotation')),
                ('is_annotated', models.BooleanField(default=False)),
                ('annotated_at', models.DateTimeField(blank=True, null=True)),
                ('is_validated_by_human', models.BooleanField(default=False)),
                ('human_validated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('annotated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='annotated_pages', to=settings.AUTH_USER_MODEL)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pages', to='rawdocs.rawdocument')),
                ('validated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='validated_pages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['page_number'],
                'unique_together': {('document', 'page_number')},
            },
        ),
        migrations.CreateModel(
            name='AnnotationSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_annotations', models.IntegerField(default=0)),
                ('pages_annotated', models.IntegerField(default=0)),
                ('ai_annotations', models.IntegerField(default=0)),
                ('manual_annotations', models.IntegerField(default=0)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('duration_minutes', models.IntegerField(default=0)),
                ('annotator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotation_sessions', to='rawdocs.rawdocument')),
            ],
        ),
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_pos', models.IntegerField(help_text='Position de début dans le texte')),
                ('end_pos', models.IntegerField(help_text='Position de fin dans le texte')),
                ('selected_text', models.CharField(help_text='Texte sélectionné', max_length=500)),
                ('confidence_score', models.FloatField(default=0.0, help_text='Score IA (0.0–1.0)')),
                ('ai_reasoning', models.TextField(blank=True, help_text='Raisonnement IA pour cette annotation')),
                ('validation_status', models.CharField(choices=[('pending', 'En attente'), ('validated', 'Validé'), ('rejected', 'Rejeté'), ('expert_created', 'Créé par expert')], default='pending', help_text="Statut de validation par l'expert", max_length=20)),
                ('source', models.CharField(choices=[('ai', 'Intelligence Artificielle'), ('manual', 'Manuel'), ('expert', 'Expert')], default='ai', max_length=10)),
                ('is_validated', models.BooleanField(default=False)),
                ('validated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('annotation_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rawdocs.annotationtype')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_annotations', to=settings.AUTH_USER_MODEL)),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotations', to='rawdocs.documentpage')),
                ('validated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='validated_annotations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['start_pos'],
            },
        ),
        migrations.CreateModel(
            name='AnnotationFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ai_annotations_before', models.JSONField(help_text='AI annotations before human correction')),
                ('human_annotations_after', models.JSONField(help_text='Final annotations after human validation')),
                ('corrections_made', models.JSONField(help_text='What was corrected: additions, deletions, modifications')),
                ('feedback_score', models.FloatField(default=0.0, help_text='Overall feedback score (0-1)')),
                ('validated_at', models.DateTimeField(auto_now_add=True)),
                ('annotator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='rawdocs.documentpage')),
            ],
            options={
                'unique_together': {('page', 'annotator')},
            },
        ),
    ]
